{
  "name": "testely",
  "displayName": "testely",
  "description": "Testely wants to help you in your test writing process.",
  "icon": "assets/testely-logo.png",
  "version": "1.8.0",
  "author": {
    "name": "Sven Liebig",
    "url": "https://github.com/Sly321/vscode-testely"
  },
  "publisher": "svenliebig",
  "repository": {
    "type": "git",
    "url": "https://github.com/Sly321/vscode-testely.git"
  },
  "homepage": "https://github.com/Sly321/vscode-testely",
  "private": true,
  "bugs": {
    "url": "https://github.com/Sly321/vscode-testely/issues"
  },
  "engines": {
    "vscode": "^1.59.0"
  },
  "categories": [
    "Testing"
  ],
  "keywords": [
    "testing",
    "test",
    "typescript"
  ],
  "activationEvents": [
    "*"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "testely.createTest",
        "title": "Create Test",
        "category": "Testely",
        "icon": "$(test-view-icon)"
      },
      {
        "command": "testely.openSourceFile",
        "title": "Open Source",
        "category": "Testely",
        "icon": "$(test-view-icon)"
      },
      {
        "command": "testely.createMockData",
        "title": "Create Mock Data",
        "category": "Testely"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "testely.createTest",
          "group": "Testely",
          "when": "editorLangId in testely.supportedLangIds && resourceFilename =~ /^.+(?<!.test.(\\w+))$/g"
        },
        {
          "command": "testely.openSourceFile",
          "group": "Testely",
          "when": "editorLangId in testely.supportedLangIds && resourceFilename =~ /^.+(.test.(\\w+))$/g"
        }
      ],
      "explorer/context": [
        {
          "command": "testely.createTest",
          "when": "resourceLangId in testely.supportedLangIds && resourceFilename =~ /^.+(?<!.test.(\\w+))$/g",
          "group": "Testely"
        },
        {
          "command": "testely.openSourceFile",
          "when": "resourceLangId in testely.supportedLangIds && resourceFilename =~ /^.+(.test.(\\w+))$/g",
          "group": "Testely"
        }
      ],
      "editor/title": [
        {
          "command": "testely.createTest",
          "when": "resourceLangId in testely.supportedLangIds && resourceFilename =~ /^.+(?<!.test.(\\w+))$/g",
          "group": "navigation"
        },
        {
          "command": "testely.openSourceFile",
          "when": "resourceLangId in testely.supportedLangIds && resourceFilename =~ /^.+(.test.(\\w+))$/g",
          "group": "navigation"
        }
      ],
      "editor/context": []
    },
    "keybindings": [
      {
        "when": "editorTextFocus && editorLangId in testely.supportedLangIds && resourceFilename =~ /^.+(?<!.test.(\\w+))$/g",
        "command": "testely.createTest",
        "key": "Ctrl+Shift+J"
      }
    ],
    "configuration": {
      "title": "Testely",
      "properties": {
        "testely.testLocation": {
          "type": "string",
          "markdownDescription": "Specifies where the tasks will be located.",
          "default": "same directory (nested)",
          "markdownEnumDescriptions": [
            "The tests will be created in the same directory. Example:\n\n    src\n     └── components \n         ├── Component.tsx \n         └── Component.test.tsx",
            "The tests will be created in a nested directory inside the directory of the source file. Example:\n\n    src\n     └── components \n         ├── __tests__\n         │   └── Component.test.tsx\n         └── Component.tsx",
            "The tests will be created flat in a test at the project root directory. Example:\n\n    src\n     └── components \n         └── Component.tsx\n    test\n     └── Component.test.tsx\n",
            "The tests will be created nested in a test at the project root directory. Example:\n\n    src\n     └── components \n         └── Component.tsx\n    test\n     └── components \n         └── Component.test.tsx\n"
          ],
          "enum": [
            "same directory",
            "same directory (nested)",
            "root test folder (flat)",
            "root test folder (nested)"
          ]
        },
        "testely.testing-library-react.screen.getFunction": {
          "type": "string",
          "markdownDescription": "Specifies which @testing-library/react screen.get-testfunction should be used when generated.",
          "default": "getByTestId",
          "markdownEnumDescriptions": [
            "will use the `screen.getByLabelText` function",
            "will use the `screen.getAllByLabelText` function",
            "will use the `screen.queryByLabelText` function",
            "will use the `screen.queryAllByLabelText` function",
            "will use the `screen.findByLabelText` function",
            "will use the `screen.findAllByLabelText` function",
            "will use the `screen.getByPlaceholderText` function",
            "will use the `screen.getAllByPlaceholderText` function",
            "will use the `screen.queryByPlaceholderText` function",
            "will use the `screen.queryAllByPlaceholderText` function",
            "will use the `screen.findByPlaceholderText` function",
            "will use the `screen.findAllByPlaceholderText` function",
            "will use the `screen.getByText` function",
            "will use the `screen.getAllByText` function",
            "will use the `screen.queryByText` function",
            "will use the `screen.queryAllByText` function",
            "will use the `screen.findByText` function",
            "will use the `screen.findAllByText` function",
            "will use the `screen.getByAltText` function",
            "will use the `screen.getAllByAltText` function",
            "will use the `screen.queryByAltText` function",
            "will use the `screen.queryAllByAltText` function",
            "will use the `screen.findByAltText` function",
            "will use the `screen.findAllByAltText` function",
            "will use the `screen.getByTitle` function",
            "will use the `screen.getAllByTitle` function",
            "will use the `screen.queryByTitle` function",
            "will use the `screen.queryAllByTitle` function",
            "will use the `screen.findByTitle` function",
            "will use the `screen.findAllByTitle` function",
            "will use the `screen.getByDisplayValue` function",
            "will use the `screen.getAllByDisplayValue` function",
            "will use the `screen.queryByDisplayValue` function",
            "will use the `screen.queryAllByDisplayValue` function",
            "will use the `screen.findByDisplayValue` function",
            "will use the `screen.findAllByDisplayValue` function",
            "will use the `screen.getByRole` function",
            "will use the `screen.getAllByRole` function",
            "will use the `screen.queryByRole` function",
            "will use the `screen.queryAllByRole` function",
            "will use the `screen.findByRole` function",
            "will use the `screen.findAllByRole` function",
            "will use the `screen.getByTestId` function",
            "will use the `screen.getAllByTestId` function",
            "will use the `screen.queryByTestId` function",
            "will use the `screen.queryAllByTestId` function",
            "will use the `screen.findByTestId` function",
            "will use the `screen.findAllByTestId` function"
          ],
          "enum": [
            "getByLabelText",
            "getAllByLabelText",
            "queryByLabelText",
            "queryAllByLabelText",
            "findByLabelText",
            "findAllByLabelText",
            "getByPlaceholderText",
            "getAllByPlaceholderText",
            "queryByPlaceholderText",
            "queryAllByPlaceholderText",
            "findByPlaceholderText",
            "findAllByPlaceholderText",
            "getByText",
            "getAllByText",
            "queryByText",
            "queryAllByText",
            "findByText",
            "findAllByText",
            "getByAltText",
            "getAllByAltText",
            "queryByAltText",
            "queryAllByAltText",
            "findByAltText",
            "findAllByAltText",
            "getByTitle",
            "getAllByTitle",
            "queryByTitle",
            "queryAllByTitle",
            "findByTitle",
            "findAllByTitle",
            "getByDisplayValue",
            "getAllByDisplayValue",
            "queryByDisplayValue",
            "queryAllByDisplayValue",
            "findByDisplayValue",
            "findAllByDisplayValue",
            "getByRole",
            "getAllByRole",
            "queryByRole",
            "queryAllByRole",
            "findByRole",
            "findAllByRole",
            "getByTestId",
            "getAllByTestId",
            "queryByTestId",
            "queryAllByTestId",
            "findByTestId",
            "findAllByTestId"
          ]
        },
        "testely.testDirectoryName": {
          "type": "string",
          "markdownDescription": "Specifies the name of the test directory. Is only used when `#testely.testLocation#` is set to `same directory (nested)`.",
          "default": "__tests__"
        },
        "testely.experimentalMockData": {
          "type": "boolean",
          "markdownDescription": "Activates the experimental mock data generation feature (Reload required).",
          "default": false
        }
      }
    }
  },
  "release": {
    "branches": "main",
    "plugins": [
      "@semantic-release/commit-analyzer",
      "@semantic-release/release-notes-generator",
      "@semantic-release/changelog",
      [
        "@semantic-release/npm",
        {
          "npmPublish": false
        }
      ],
      [
        "@semantic-release/git",
        {
          "assets": [
            "./CHANGELOG.md",
            "package.json"
          ],
          "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
        }
      ]
    ],
    "verifyConditions": [
      "@semantic-release/github"
    ],
    "publish": [
      "@semantic-release/github"
    ],
    "success": [
      "@semantic-release/github"
    ],
    "fail": [
      "@semantic-release/github"
    ]
  },
  "scripts": {
    "vscode:prepublish": "yarn run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "test-compile": "tsc -p ./",
    "test-watch": "tsc -watch -p ./",
    "pretest": "yarn run test-compile && yarn run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js",
    "test:helpers": "node ./out/test/helpers/index.js",
    "test:helpers:watch": "nodemon --watch ./out/helpers --watch ./out/test/helpers ./out/test/helpers/index.js",
    "test:generators:watch": "nodemon --watch ./out/generators --watch ./out/test/generators ./out/test/generators/index.js"
  },
  "devDependencies": {
    "@semantic-release/changelog": "^5.0.1",
    "@semantic-release/commit-analyzer": "^8.0.1",
    "@semantic-release/git": "^9.0.1",
    "@semantic-release/github": "^7.2.3",
    "@semantic-release/npm": "^7.1.3",
    "@semantic-release/release-notes-generator": "^9.0.3",
    "@types/glob": "^7.1.3",
    "@types/mocha": "^8.2.2",
    "@types/node": "14.x",
    "@types/vscode": "^1.59.0",
    "@typescript-eslint/eslint-plugin": "^4.26.0",
    "@typescript-eslint/parser": "^4.26.0",
    "eslint": "^7.27.0",
    "glob": "^7.1.7",
    "mocha": "^8.4.0",
    "nodemon": "^2.0.14",
    "semantic-release": "^17.4.7",
    "ts-loader": "^9.2.2",
    "typescript": "^4.3.2",
    "vscode-test": "^1.6.1",
    "webpack": "^5.38.1",
    "webpack-cli": "^4.7.0"
  },
  "dependencies": {}
}
